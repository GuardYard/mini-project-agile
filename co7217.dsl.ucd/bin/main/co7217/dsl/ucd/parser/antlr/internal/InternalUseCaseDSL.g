/*
 * generated by Xtext 2.23.0
 */
grammar InternalUseCaseDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package co7217.dsl.ucd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package co7217.dsl.ucd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import co7217.dsl.ucd.services.UseCaseDSLGrammarAccess;

}

@parser::members {

 	private UseCaseDSLGrammarAccess grammarAccess;

    public InternalUseCaseDSLParser(TokenStream input, UseCaseDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Diagram";
   	}

   	@Override
   	protected UseCaseDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	iv_ruleDiagram=ruleDiagram
	{ $current=$iv_ruleDiagram.current; }
	EOF;

// Rule Diagram
ruleDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDiagramAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDiagramRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"co7217.dsl.ucd.UseCaseDSL.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getUseCasesParserRuleCall_0());
		}
		this_UseCases_0=ruleUseCases
		{
			$current = $this_UseCases_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getActorsParserRuleCall_1());
		}
		this_Actors_1=ruleActors
		{
			$current = $this_Actors_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUseCases
entryRuleUseCases returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCasesRule()); }
	iv_ruleUseCases=ruleUseCases
	{ $current=$iv_ruleUseCases.current; }
	EOF;

// Rule UseCases
ruleUseCases returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use cases:'
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCasesAccess().getUseCasesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCasesAccess().getUseCaseUsecaseParserRuleCall_1_0());
				}
				lv_useCase_1_0=ruleUsecase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCasesRule());
					}
					add(
						$current,
						"useCase",
						lv_useCase_1_0,
						"co7217.dsl.ucd.UseCaseDSL.Usecase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUsecase
entryRuleUsecase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsecaseRule()); }
	iv_ruleUsecase=ruleUsecase
	{ $current=$iv_ruleUsecase.current; }
	EOF;

// Rule Usecase
ruleUsecase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='useCase'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsecaseAccess().getUseCaseKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getUsecaseAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUsecaseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getUsecaseAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_instructions_3_0=RULE_STRING
				{
					newLeafNode(lv_instructions_3_0, grammarAccess.getUsecaseAccess().getInstructionsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUsecaseRule());
					}
					setWithLastConsumed(
						$current,
						"instructions",
						lv_instructions_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getUsecaseAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleActors
entryRuleActors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorsRule()); }
	iv_ruleActors=ruleActors
	{ $current=$iv_ruleActors.current; }
	EOF;

// Rule Actors
ruleActors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='actors:'
		{
			newLeafNode(otherlv_0, grammarAccess.getActorsAccess().getActorsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActorsAccess().getActorActorParserRuleCall_1_0());
				}
				lv_actor_1_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorsRule());
					}
					add(
						$current,
						"actor",
						lv_actor_1_0,
						"co7217.dsl.ucd.UseCaseDSL.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='actor'
		{
			newLeafNode(otherlv_0, grammarAccess.getActorAccess().getActorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getActorAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getActorAccess().getTypeActorCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='=>'
		{
			newLeafNode(otherlv_4, grammarAccess.getActorAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_4_0());
				}
			)
		)*
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getActorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_5_1_0());
					}
				)
			)
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
