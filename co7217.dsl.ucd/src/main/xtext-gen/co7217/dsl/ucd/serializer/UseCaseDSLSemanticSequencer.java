/*
 * generated by Xtext 2.23.0
 */
package co7217.dsl.ucd.serializer;

import co7217.dsl.ucd.services.UseCaseDSLGrammarAccess;
import co7217.dsl.ucd.useCaseDSL.Actor;
import co7217.dsl.ucd.useCaseDSL.Actors;
import co7217.dsl.ucd.useCaseDSL.Diagram;
import co7217.dsl.ucd.useCaseDSL.UseCaseDSLPackage;
import co7217.dsl.ucd.useCaseDSL.UseCases;
import co7217.dsl.ucd.useCaseDSL.Usecase;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UseCaseDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UseCaseDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UseCaseDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UseCaseDSLPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case UseCaseDSLPackage.ACTORS:
				sequence_Actors(context, (Actors) semanticObject); 
				return; 
			case UseCaseDSLPackage.DIAGRAM:
				sequence_Diagram(context, (Diagram) semanticObject); 
				return; 
			case UseCaseDSLPackage.USE_CASES:
				sequence_UseCases(context, (UseCases) semanticObject); 
				return; 
			case UseCaseDSLPackage.USECASE:
				sequence_Usecase(context, (Usecase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (name=ID Type=[Actor|ID]? usecase+=[Usecase|ID]* usecase+=[Usecase|ID]*)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Actors
	 *     Actors returns Actors
	 *
	 * Constraint:
	 *     actor+=Actor+
	 */
	protected void sequence_Actors(ISerializationContext context, Actors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Diagram returns Diagram
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_Diagram(ISerializationContext context, Diagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns UseCases
	 *     UseCases returns UseCases
	 *
	 * Constraint:
	 *     useCase+=Usecase+
	 */
	protected void sequence_UseCases(ISerializationContext context, UseCases semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Usecase returns Usecase
	 *
	 * Constraint:
	 *     (name=ID instructions=STRING)
	 */
	protected void sequence_Usecase(ISerializationContext context, Usecase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UseCaseDSLPackage.Literals.USECASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDSLPackage.Literals.USECASE__NAME));
			if (transientValues.isValueTransient(semanticObject, UseCaseDSLPackage.Literals.USECASE__INSTRUCTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDSLPackage.Literals.USECASE__INSTRUCTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUsecaseAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUsecaseAccess().getInstructionsSTRINGTerminalRuleCall_3_0(), semanticObject.getInstructions());
		feeder.finish();
	}
	
	
}
