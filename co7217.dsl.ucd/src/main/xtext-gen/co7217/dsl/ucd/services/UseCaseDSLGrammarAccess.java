/*
 * generated by Xtext 2.23.0
 */
package co7217.dsl.ucd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.Diagram");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Diagram:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUseCasesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActorsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	UseCases | Actors;
		@Override public ParserRule getRule() { return rule; }
		
		//UseCases | Actors
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UseCases
		public RuleCall getUseCasesParserRuleCall_0() { return cUseCasesParserRuleCall_0; }
		
		//Actors
		public RuleCall getActorsParserRuleCall_1() { return cActorsParserRuleCall_1; }
	}
	public class UseCasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.UseCases");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCasesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUseCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseCaseUsecaseParserRuleCall_1_0 = (RuleCall)cUseCaseAssignment_1.eContents().get(0);
		
		//UseCases:
		//	'use cases:'
		//	useCase+=Usecase*;
		@Override public ParserRule getRule() { return rule; }
		
		//'use cases:' useCase+=Usecase*
		public Group getGroup() { return cGroup; }
		
		//'use cases:'
		public Keyword getUseCasesKeyword_0() { return cUseCasesKeyword_0; }
		
		//useCase+=Usecase*
		public Assignment getUseCaseAssignment_1() { return cUseCaseAssignment_1; }
		
		//Usecase
		public RuleCall getUseCaseUsecaseParserRuleCall_1_0() { return cUseCaseUsecaseParserRuleCall_1_0; }
	}
	public class UsecaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.Usecase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsSTRINGTerminalRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Usecase:
		//	'useCase' name=ID '(' instructions=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'useCase' name=ID '(' instructions=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'useCase'
		public Keyword getUseCaseKeyword_0() { return cUseCaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//instructions=STRING
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//STRING
		public RuleCall getInstructionsSTRINGTerminalRuleCall_3_0() { return cInstructionsSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ActorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.Actors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorActorParserRuleCall_1_0 = (RuleCall)cActorAssignment_1.eContents().get(0);
		
		//Actors:
		//	'actors:'
		//	actor+=Actor*;
		@Override public ParserRule getRule() { return rule; }
		
		//'actors:' actor+=Actor*
		public Group getGroup() { return cGroup; }
		
		//'actors:'
		public Keyword getActorsKeyword_0() { return cActorsKeyword_0; }
		
		//actor+=Actor*
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//Actor
		public RuleCall getActorActorParserRuleCall_1_0() { return cActorActorParserRuleCall_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co7217.dsl.ucd.UseCaseDSL.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypeActorCrossReference_2_1_0 = (CrossReference)cTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cTypeActorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTypeActorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUsecaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cUsecaseUsecaseCrossReference_4_0 = (CrossReference)cUsecaseAssignment_4.eContents().get(0);
		private final RuleCall cUsecaseUsecaseIDTerminalRuleCall_4_0_1 = (RuleCall)cUsecaseUsecaseCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUsecaseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cUsecaseUsecaseCrossReference_5_1_0 = (CrossReference)cUsecaseAssignment_5_1.eContents().get(0);
		private final RuleCall cUsecaseUsecaseIDTerminalRuleCall_5_1_0_1 = (RuleCall)cUsecaseUsecaseCrossReference_5_1_0.eContents().get(1);
		
		//Actor:
		//	'actor' name=ID ('extends' Type=[Actor])? '=>' usecase+=[Usecase]* (',' usecase+=[Usecase])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID ('extends' Type=[Actor])? '=>' usecase+=[Usecase]* (',' usecase+=[Usecase])*
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' Type=[Actor])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//Type=[Actor]
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//[Actor]
		public CrossReference getTypeActorCrossReference_2_1_0() { return cTypeActorCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTypeActorIDTerminalRuleCall_2_1_0_1() { return cTypeActorIDTerminalRuleCall_2_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//usecase+=[Usecase]*
		public Assignment getUsecaseAssignment_4() { return cUsecaseAssignment_4; }
		
		//[Usecase]
		public CrossReference getUsecaseUsecaseCrossReference_4_0() { return cUsecaseUsecaseCrossReference_4_0; }
		
		//ID
		public RuleCall getUsecaseUsecaseIDTerminalRuleCall_4_0_1() { return cUsecaseUsecaseIDTerminalRuleCall_4_0_1; }
		
		//(',' usecase+=[Usecase])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//usecase+=[Usecase]
		public Assignment getUsecaseAssignment_5_1() { return cUsecaseAssignment_5_1; }
		
		//[Usecase]
		public CrossReference getUsecaseUsecaseCrossReference_5_1_0() { return cUsecaseUsecaseCrossReference_5_1_0; }
		
		//ID
		public RuleCall getUsecaseUsecaseIDTerminalRuleCall_5_1_0_1() { return cUsecaseUsecaseIDTerminalRuleCall_5_1_0_1; }
	}
	
	
	private final DiagramElements pDiagram;
	private final AbstractElementElements pAbstractElement;
	private final UseCasesElements pUseCases;
	private final UsecaseElements pUsecase;
	private final ActorsElements pActors;
	private final ActorElements pActor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDiagram = new DiagramElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pUseCases = new UseCasesElements();
		this.pUsecase = new UsecaseElements();
		this.pActors = new ActorsElements();
		this.pActor = new ActorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co7217.dsl.ucd.UseCaseDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Diagram:
	//	elements+=AbstractElement*;
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	//AbstractElement:
	//	UseCases | Actors;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//UseCases:
	//	'use cases:'
	//	useCase+=Usecase*;
	public UseCasesElements getUseCasesAccess() {
		return pUseCases;
	}
	
	public ParserRule getUseCasesRule() {
		return getUseCasesAccess().getRule();
	}
	
	//Usecase:
	//	'useCase' name=ID '(' instructions=STRING ')';
	public UsecaseElements getUsecaseAccess() {
		return pUsecase;
	}
	
	public ParserRule getUsecaseRule() {
		return getUsecaseAccess().getRule();
	}
	
	//Actors:
	//	'actors:'
	//	actor+=Actor*;
	public ActorsElements getActorsAccess() {
		return pActors;
	}
	
	public ParserRule getActorsRule() {
		return getActorsAccess().getRule();
	}
	
	//Actor:
	//	'actor' name=ID ('extends' Type=[Actor])? '=>' usecase+=[Usecase]* (',' usecase+=[Usecase])*;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
