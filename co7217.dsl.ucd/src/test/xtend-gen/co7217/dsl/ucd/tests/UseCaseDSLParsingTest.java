/**
 * generated by Xtext 2.23.0
 */
package co7217.dsl.ucd.tests;

import co7217.dsl.ucd.tests.UseCaseDSLInjectorProvider;
import co7217.dsl.ucd.useCaseDSL.Diagram;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(UseCaseDSLInjectorProvider.class)
@SuppressWarnings("all")
public class UseCaseDSLParsingTest {
  @Inject
  private ParseHelper<Diagram> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("use cases:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("useCase EatFood ( \"The guest arrives with the order and gets the food\" )");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("useCase PayForFood ( \"The guest orders food via the app and pays online\" )");
      _builder.newLine();
      _builder.newLine();
      _builder.append("actors:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actor Guest => EatFood, PayForFood");
      _builder.newLine();
      final Diagram result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
