/*
 * generated by Xtext 2.23.0
 */
grammar InternalUseCaseDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package co7217.dsl.ucd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package co7217.dsl.ucd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import co7217.dsl.ucd.services.UseCaseDSLGrammarAccess;

}
@parser::members {
	private UseCaseDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(UseCaseDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDiagram
entryRuleDiagram
:
{ before(grammarAccess.getDiagramRule()); }
	 ruleDiagram
{ after(grammarAccess.getDiagramRule()); } 
	 EOF 
;

// Rule Diagram
ruleDiagram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiagramAccess().getElementsAssignment()); }
		(rule__Diagram__ElementsAssignment)*
		{ after(grammarAccess.getDiagramAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
		(rule__AbstractElement__Alternatives)
		{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUseCases
entryRuleUseCases
:
{ before(grammarAccess.getUseCasesRule()); }
	 ruleUseCases
{ after(grammarAccess.getUseCasesRule()); } 
	 EOF 
;

// Rule UseCases
ruleUseCases 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUseCasesAccess().getGroup()); }
		(rule__UseCases__Group__0)
		{ after(grammarAccess.getUseCasesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUsecase
entryRuleUsecase
:
{ before(grammarAccess.getUsecaseRule()); }
	 ruleUsecase
{ after(grammarAccess.getUsecaseRule()); } 
	 EOF 
;

// Rule Usecase
ruleUsecase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUsecaseAccess().getGroup()); }
		(rule__Usecase__Group__0)
		{ after(grammarAccess.getUsecaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActors
entryRuleActors
:
{ before(grammarAccess.getActorsRule()); }
	 ruleActors
{ after(grammarAccess.getActorsRule()); } 
	 EOF 
;

// Rule Actors
ruleActors 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorsAccess().getGroup()); }
		(rule__Actors__Group__0)
		{ after(grammarAccess.getActorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActor
entryRuleActor
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorAccess().getGroup()); }
		(rule__Actor__Group__0)
		{ after(grammarAccess.getActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractElementAccess().getUseCasesParserRuleCall_0()); }
		ruleUseCases
		{ after(grammarAccess.getAbstractElementAccess().getUseCasesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractElementAccess().getActorsParserRuleCall_1()); }
		ruleActors
		{ after(grammarAccess.getAbstractElementAccess().getActorsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCases__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCases__Group__0__Impl
	rule__UseCases__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCases__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCasesAccess().getUseCasesKeyword_0()); }
	'use cases:'
	{ after(grammarAccess.getUseCasesAccess().getUseCasesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCases__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCases__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCases__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCasesAccess().getUseCaseAssignment_1()); }
	(rule__UseCases__UseCaseAssignment_1)*
	{ after(grammarAccess.getUseCasesAccess().getUseCaseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Usecase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Usecase__Group__0__Impl
	rule__Usecase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsecaseAccess().getUseCaseKeyword_0()); }
	'useCase'
	{ after(grammarAccess.getUsecaseAccess().getUseCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Usecase__Group__1__Impl
	rule__Usecase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsecaseAccess().getNameAssignment_1()); }
	(rule__Usecase__NameAssignment_1)
	{ after(grammarAccess.getUsecaseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Usecase__Group__2__Impl
	rule__Usecase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsecaseAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getUsecaseAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Usecase__Group__3__Impl
	rule__Usecase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsecaseAccess().getInstructionsAssignment_3()); }
	(rule__Usecase__InstructionsAssignment_3)
	{ after(grammarAccess.getUsecaseAccess().getInstructionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Usecase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsecaseAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getUsecaseAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group__0__Impl
	rule__Actors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getActorsKeyword_0()); }
	'actors:'
	{ after(grammarAccess.getActorsAccess().getActorsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getActorAssignment_1()); }
	(rule__Actors__ActorAssignment_1)*
	{ after(grammarAccess.getActorsAccess().getActorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__0__Impl
	rule__Actor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getActorKeyword_0()); }
	'actor'
	{ after(grammarAccess.getActorAccess().getActorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__1__Impl
	rule__Actor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getNameAssignment_1()); }
	(rule__Actor__NameAssignment_1)
	{ after(grammarAccess.getActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__2__Impl
	rule__Actor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getGroup_2()); }
	(rule__Actor__Group_2__0)?
	{ after(grammarAccess.getActorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__3__Impl
	rule__Actor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getEqualsSignGreaterThanSignKeyword_3()); }
	'=>'
	{ after(grammarAccess.getActorAccess().getEqualsSignGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__4__Impl
	rule__Actor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getUsecaseAssignment_4()); }
	(rule__Actor__UsecaseAssignment_4)*
	{ after(grammarAccess.getActorAccess().getUsecaseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getGroup_5()); }
	(rule__Actor__Group_5__0)*
	{ after(grammarAccess.getActorAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group_2__0__Impl
	rule__Actor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getActorAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getTypeAssignment_2_1()); }
	(rule__Actor__TypeAssignment_2_1)
	{ after(grammarAccess.getActorAccess().getTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group_5__0__Impl
	rule__Actor__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getCommaKeyword_5_0()); }
	','
	{ after(grammarAccess.getActorAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getUsecaseAssignment_5_1()); }
	(rule__Actor__UsecaseAssignment_5_1)
	{ after(grammarAccess.getActorAccess().getUsecaseAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Diagram__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiagramAccess().getElementsAbstractElementParserRuleCall_0()); }
		ruleAbstractElement
		{ after(grammarAccess.getDiagramAccess().getElementsAbstractElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCases__UseCaseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUseCasesAccess().getUseCaseUsecaseParserRuleCall_1_0()); }
		ruleUsecase
		{ after(grammarAccess.getUseCasesAccess().getUseCaseUsecaseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUsecaseAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getUsecaseAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Usecase__InstructionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUsecaseAccess().getInstructionsSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getUsecaseAccess().getInstructionsSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__ActorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorsAccess().getActorActorParserRuleCall_1_0()); }
		ruleActor
		{ after(grammarAccess.getActorsAccess().getActorActorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__TypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getTypeActorCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getActorAccess().getTypeActorIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActorAccess().getTypeActorIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getActorAccess().getTypeActorCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__UsecaseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_4_0()); }
		(
			{ before(grammarAccess.getActorAccess().getUsecaseUsecaseIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActorAccess().getUsecaseUsecaseIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__UsecaseAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_5_1_0()); }
		(
			{ before(grammarAccess.getActorAccess().getUsecaseUsecaseIDTerminalRuleCall_5_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getActorAccess().getUsecaseUsecaseIDTerminalRuleCall_5_1_0_1()); }
		)
		{ after(grammarAccess.getActorAccess().getUsecaseUsecaseCrossReference_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
