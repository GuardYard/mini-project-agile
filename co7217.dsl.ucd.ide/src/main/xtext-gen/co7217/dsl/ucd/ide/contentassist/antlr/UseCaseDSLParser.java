/*
 * generated by Xtext 2.23.0
 */
package co7217.dsl.ucd.ide.contentassist.antlr;

import co7217.dsl.ucd.ide.contentassist.antlr.internal.InternalUseCaseDSLParser;
import co7217.dsl.ucd.services.UseCaseDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UseCaseDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UseCaseDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UseCaseDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getUseCasesAccess().getGroup(), "rule__UseCases__Group__0");
			builder.put(grammarAccess.getUsecaseAccess().getGroup(), "rule__Usecase__Group__0");
			builder.put(grammarAccess.getActorsAccess().getGroup(), "rule__Actors__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup_2(), "rule__Actor__Group_2__0");
			builder.put(grammarAccess.getActorAccess().getGroup_5(), "rule__Actor__Group_5__0");
			builder.put(grammarAccess.getDiagramAccess().getElementsAssignment(), "rule__Diagram__ElementsAssignment");
			builder.put(grammarAccess.getUseCasesAccess().getUseCaseAssignment_1(), "rule__UseCases__UseCaseAssignment_1");
			builder.put(grammarAccess.getUsecaseAccess().getNameAssignment_1(), "rule__Usecase__NameAssignment_1");
			builder.put(grammarAccess.getUsecaseAccess().getInstructionsAssignment_3(), "rule__Usecase__InstructionsAssignment_3");
			builder.put(grammarAccess.getActorsAccess().getActorAssignment_1(), "rule__Actors__ActorAssignment_1");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getTypeAssignment_2_1(), "rule__Actor__TypeAssignment_2_1");
			builder.put(grammarAccess.getActorAccess().getUsecaseAssignment_4(), "rule__Actor__UsecaseAssignment_4");
			builder.put(grammarAccess.getActorAccess().getUsecaseAssignment_5_1(), "rule__Actor__UsecaseAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UseCaseDSLGrammarAccess grammarAccess;

	@Override
	protected InternalUseCaseDSLParser createParser() {
		InternalUseCaseDSLParser result = new InternalUseCaseDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UseCaseDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UseCaseDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
